// <auto-generated />
using System;
using CommentsStorage.Worker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace CommentsStorage.Worker.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230914072332_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommentsStorage.Worker.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorChannelId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorChannelUrl")
                        .HasColumnType("text");

                    b.Property<string>("AuthorDisplayName")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("AuthorDisplayNameSearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('simple', coalesce(\"AuthorDisplayName\", ''))", true);

                    b.Property<string>("AuthorProfileImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ChannelId")
                        .HasColumnType("text");

                    b.Property<string>("Etag")
                        .HasColumnType("text");

                    b.Property<decimal>("LikeCount")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TextDisplay")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("TextDisplaySearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('simple', coalesce(\"TextDisplay\", ''))", true);

                    b.Property<string>("TextOriginal")
                        .HasColumnType("text");

                    b.Property<long>("TotalReplyCount")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ViewerRating")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorDisplayNameSearchVector")
                        .HasDatabaseName("IX_Comments_AuthorDisplayNameSearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AuthorDisplayNameSearchVector"), "GIN");

                    b.HasIndex("PublishedAt")
                        .HasDatabaseName("IX_Comments_PublishedAt");

                    b.HasIndex("TextDisplaySearchVector")
                        .HasDatabaseName("IX_Comments_TextDisplaySearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TextDisplaySearchVector"), "GIN");

                    b.HasIndex("VideoId")
                        .HasDatabaseName("IX_Comments_VideoId");

                    b.HasIndex("VideoId", "PublishedAt")
                        .HasDatabaseName("IX_Comments_VideoId_PublishedAt");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CommentsStorage.Worker.Models.Video", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FirstComment")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Videos_Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("CommentsStorage.Worker.Models.Comment", b =>
                {
                    b.HasOne("CommentsStorage.Worker.Models.Video", null)
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
